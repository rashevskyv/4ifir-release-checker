import json
import logging
from datetime import datetime
import os
import tempfile
import asyncio
import requests
import subprocess

from pyrogram import Client, filters, idle
from pyrogram.types import Message

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
def load_config():
    try:
        with open('config.json', 'r', encoding='utf-8') as config_file:
            return json.load(config_file)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        raise

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CONFIG = load_config()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
API_ID = CONFIG.get("telegram", {}).get("api_id")
API_HASH = CONFIG.get("telegram", {}).get("api_hash")
TELEGRAM_GROUP_ID = int(CONFIG["telegram"]["group_id"])
TELEGRAM_TOPIC_ID = int(CONFIG["telegram"]["topic_id"])
TELEGRAM_LOG_CHAT_ID = int(CONFIG["telegram"]["log_chat_id"])
GITHUB_TOKEN = CONFIG["github"]["token"]
GITHUB_OWNER = CONFIG["github"]["owner"]
GITHUB_REPO = CONFIG["github"]["repo"]
RELEASE_FILE_PATTERN = CONFIG["release"]["file_pattern"]

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ Pyrogram
app = Client(
    "4ifir_release_bot",
    api_id=API_ID,
    api_hash=API_HASH
)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –º–µ–¥—ñ–∞-–≥—Ä—É–ø
processed_media_groups = {}

def add_file_to_release(upload_url, file_path, file_name, headers):
    """–î–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —Ä–µ–ª—ñ–∑—É."""
    try:
        with open(file_path, 'rb') as file:
            upload_headers = headers.copy()
            upload_headers["Content-Type"] = "application/zip"
            
            upload_response = requests.post(
                f"{upload_url}?name={file_name}",
                headers=upload_headers,
                data=file
            )
            upload_response.raise_for_status()
        
        logger.info(f"–§–∞–π–ª {file_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–µ–ª—ñ–∑—É")
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É {file_name} –¥–æ —Ä–µ–ª—ñ–∑—É: {e}")
        return False

def run_checker_script():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É."""
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ bash —Å–∫—Ä–∏–ø—Ç
        subprocess.run(['bash', os.path.expanduser('~/4ifir-checker/run_checker.sh')], check=True)
        logger.info("–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return False

def create_github_release(version: str, description: str, file_paths):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub —ñ –¥–æ–¥–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ —Ñ–∞–π–ª–∏."""
    # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–ª—ñ–∑
    release_url = f"https://api.github.com/repos/{GITHUB_OWNER}/{GITHUB_REPO}/releases"
    
    headers = {
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {GITHUB_TOKEN}",
        "X-GitHub-Api-Version": "2022-11-28"
    }
    
    data = {
        "tag_name": f"v{version}",
        "target_commitish": "main",
        "name": "4IFIR",  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞ —Ä–µ–ª—ñ–∑—É
        "body": description,
        "draft": False,
        "prerelease": False
    }
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É
        response = requests.post(release_url, headers=headers, json=data)
        response.raise_for_status()
        release_data = response.json()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Å—Å–µ—Ç—ñ–≤
        upload_url = release_data["upload_url"].split("{")[0]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
        all_uploads_successful = True
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ —è–∫ –∞—Å—Å–µ—Ç–∏
        for file_info in file_paths:
            file_path = file_info["path"]
            file_name = file_info["name"]
            
            success = add_file_to_release(upload_url, file_path, file_name, headers)
            if not success:
                all_uploads_successful = False
        
        if all_uploads_successful:
            logger.info(f"GitHub —Ä–µ–ª—ñ–∑ v{version} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —É—Å—ñ–º–∞ —Ñ–∞–π–ª–∞–º–∏")
        else:
            logger.warning(f"GitHub —Ä–µ–ª—ñ–∑ v{version} —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –¥–µ—è–∫—ñ —Ñ–∞–π–ª–∏ –Ω–µ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            
        return all_uploads_successful, release_data["html_url"]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GitHub —Ä–µ–ª—ñ–∑—É: {e}")
        return False, None

@app.on_message(filters.chat(TELEGRAM_GROUP_ID) & filters.document)
async def handle_document(client, message: Message):
    """–û–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ç–æ–ø—ñ–∫—É
        if hasattr(message, 'reply_to_message_id') and message.reply_to_message_id == TELEGRAM_TOPIC_ID:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–æ–≥ —É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —á–∞—Ç –¥–ª—è –ª–æ–≥—ñ–≤
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–æ–ø—ñ–∫—É {TELEGRAM_TOPIC_ID}. –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É..."
            )
        else:
            return
        
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏, –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–≥–æ –¥–æ —ñ–Ω—à–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞
        if message.media_group_id:
            await handle_media_group_message(client, message)
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
        if not message.document:
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —Ä–µ–ª—ñ–∑-–Ω–æ—É—Ç
        release_notes = message.caption if message.caption else "–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑"
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é –∑ —á–∞—Å–æ–≤–æ—ó –º—ñ—Ç–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY.MM.DD-HH.MM
        version = datetime.now().strftime("%Y.%m.%d-%H.%M")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ä–µ–ª—ñ–∑—É
        files_to_add = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        file_name = message.document.file_name
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞—Ä—Ö—ñ–≤ (.zip)
        if file_name.endswith('.zip'):
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_file:
                temp_path = temp_file.name
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª
            await message.download(temp_path)
            
            files_to_add.append({"path": temp_path, "name": file_name})
            
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                f"üì¶ –§–∞–π–ª {file_name} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª"
            )
        
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ä–µ–ª—ñ–∑—É
        if files_to_add:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub –∑ —Ñ–∞–π–ª–∞–º–∏
            success, release_url = create_github_release(version, release_notes, files_to_add)
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
            for file_info in files_to_add:
                os.unlink(file_info["path"])
            
            if success:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                checker_result = run_checker_script()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –ª–æ–≥—ñ–≤
                file_names_str = ", ".join([f"`{file_info['name']}`" for file_info in files_to_add])
                success_message = f"‚úÖ –†–µ–ª—ñ–∑ v{version} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ GitHub!\n" + \
                                  f"üìÇ –î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª–∏: {file_names_str}\n" + \
                                  f"üìé {release_url}"
                
                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                if checker_result:
                    success_message += "\nüîç –ó–∞–ø—É—â–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                else:
                    success_message += "\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                
                await client.send_message(
                    TELEGRAM_LOG_CHAT_ID,
                    success_message
                )
            else:
                await client.send_message(
                    TELEGRAM_LOG_CHAT_ID,
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏."
                )
        else:
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                "‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ö—ñ–≤—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ä–µ–ª—ñ–∑—É."
            )
    except Exception as e:
        error_message = f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
        logger.error(error_message)
        await client.send_message(TELEGRAM_LOG_CHAT_ID, error_message)

async def handle_media_group_message(client, message: Message):
    """–û–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏."""
    try:
        media_group_id = message.media_group_id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —Ü—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∞ –Ω–µ—â–æ–¥–∞–≤–Ω–æ
        current_time = datetime.now()
        if media_group_id in processed_media_groups:
            last_processed_time = processed_media_groups[media_group_id]
            # –Ø–∫—â–æ –æ–±—Ä–æ–±–ª—è–ª–∏ –º–µ–Ω—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if (current_time - last_processed_time).total_seconds() < 60:
                logger.info(f"–ú–µ–¥—ñ–∞-–≥—Ä—É–ø–∞ {media_group_id} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –Ω–µ—â–æ–¥–∞–≤–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
                return
        
        # –ü–æ–º—ñ—á–∞—î–º–æ —Ü—é –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω—É
        processed_media_groups[media_group_id] = current_time
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î ZIP-—Ñ–∞–π–ª —É —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        if not message.document or not message.document.file_name.endswith('.zip'):
            logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—ñ {media_group_id} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å ZIP-–∞—Ä—Ö—ñ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏
        await client.send_message(
            TELEGRAM_LOG_CHAT_ID,
            f"üì• –û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ {media_group_id}. –ó–∞—á–µ–∫–∞–π—Ç–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏..."
        )
        
        # –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—ñ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ
        await asyncio.sleep(2)
        
        # –ì–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–ª—ñ–∑—É
        release_notes = message.caption if message.caption else "–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑"
        version = datetime.now().strftime("%Y.%m.%d-%H.%M")
        files_to_add = []
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_file:
            temp_path = temp_file.name
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        await message.download(temp_path)
        
        files_to_add.append({"path": temp_path, "name": message.document.file_name})
        
        await client.send_message(
            TELEGRAM_LOG_CHAT_ID,
            f"üì¶ –§–∞–π–ª {message.document.file_name} –∑ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª"
        )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ü—ñ—î—ó –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω)
        from datetime import timedelta
        five_minutes_ago = int((current_time - timedelta(minutes=5)).timestamp())
        
        try:
            async for msg in client.get_chat_history(TELEGRAM_GROUP_ID, limit=50):
                # –®—É–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç—ñ—î—é –∂ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–æ—é
                if (msg.media_group_id == media_group_id and 
                    msg.id != message.id and  # –Ω–µ –¥—É–±–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    msg.document and 
                    msg.document.file_name.endswith('.zip')):
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è —Ü—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as new_temp_file:
                        new_temp_path = new_temp_file.name
                    
                    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
                    await msg.download(new_temp_path)
                    
                    files_to_add.append({"path": new_temp_path, "name": msg.document.file_name})
                    
                    await client.send_message(
                        TELEGRAM_LOG_CHAT_ID,
                        f"üì¶ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ–∞–π–ª {msg.document.file_name} –∑ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª"
                    )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏: {e}")
        
        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ä–µ–ª—ñ–∑—É
        if files_to_add:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub –∑ —Ñ–∞–π–ª–∞–º–∏
            success, release_url = create_github_release(version, release_notes, files_to_add)
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
            for file_info in files_to_add:
                os.unlink(file_info["path"])
            
            if success:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                checker_result = run_checker_script()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –ª–æ–≥—ñ–≤
                file_names_str = ", ".join([f"`{file_info['name']}`" for file_info in files_to_add])
                success_message = f"‚úÖ –†–µ–ª—ñ–∑ v{version} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ GitHub!\n" + \
                                  f"üìÇ –î–æ–¥–∞–Ω–æ —Ñ–∞–π–ª–∏ –∑ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏: {file_names_str}\n" + \
                                  f"üìé {release_url}"
                
                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                if checker_result:
                    success_message += "\nüîç –ó–∞–ø—É—â–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                else:
                    success_message += "\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                
                await client.send_message(
                    TELEGRAM_LOG_CHAT_ID,
                    success_message
                )
            else:
                await client.send_message(
                    TELEGRAM_LOG_CHAT_ID,
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏."
                )
        else:
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                "‚ÑπÔ∏è –í –º–µ–¥—ñ–∞-–≥—Ä—É–ø—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä—Ö—ñ–≤—ñ–≤ –¥–ª—è —Ä–µ–ª—ñ–∑—É."
            )
            
    except Exception as e:
        error_message = f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏: {str(e)}"
        logger.error(error_message)
        await client.send_message(TELEGRAM_LOG_CHAT_ID, error_message)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await app.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏
    await idle()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())