import json
import logging
from datetime import datetime
import os
import tempfile
import asyncio
import requests

from pyrogram import Client, filters, idle
from pyrogram.types import Message

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
def load_config():
    try:
        with open('config.json', 'r', encoding='utf-8') as config_file:
            return json.load(config_file)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        raise

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
CONFIG = load_config()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
API_ID = CONFIG.get("telegram", {}).get("api_id")
API_HASH = CONFIG.get("telegram", {}).get("api_hash")
TELEGRAM_GROUP_ID = int(CONFIG["telegram"]["group_id"])
TELEGRAM_TOPIC_ID = int(CONFIG["telegram"]["topic_id"])
TELEGRAM_LOG_CHAT_ID = int(CONFIG["telegram"]["log_chat_id"])
GITHUB_TOKEN = CONFIG["github"]["token"]
GITHUB_OWNER = CONFIG["github"]["owner"]
GITHUB_REPO = CONFIG["github"]["repo"]
RELEASE_FILE_PATTERN = CONFIG["release"]["file_pattern"]

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ Pyrogram
app = Client(
    "4ifir_release_bot",
    api_id=API_ID,
    api_hash=API_HASH
)

def create_github_release(version: str, description: str, file_path):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub —ñ –¥–æ–¥–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ —Ñ–∞–π–ª."""
    # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–ª—ñ–∑
    release_url = f"https://api.github.com/repos/{GITHUB_OWNER}/{GITHUB_REPO}/releases"
    
    headers = {
        "Accept": "application/vnd.github+json",
        "Authorization": f"Bearer {GITHUB_TOKEN}",
        "X-GitHub-Api-Version": "2022-11-28"
    }
    
    data = {
        "tag_name": f"v{version}",
        "target_commitish": "main",
        "name": "4IFIR",  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞ —Ä–µ–ª—ñ–∑—É
        "body": description,
        "draft": False,
        "prerelease": False
    }
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–ª—ñ–∑—É
        response = requests.post(release_url, headers=headers, json=data)
        response.raise_for_status()
        release_data = response.json()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Å—Å–µ—Ç—ñ–≤
        upload_url = release_data["upload_url"].split("{")[0]
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —è–∫ –∞—Å—Å–µ—Ç
        with open(file_path, 'rb') as file:
            upload_headers = headers.copy()
            upload_headers["Content-Type"] = "application/zip"
            
            upload_response = requests.post(
                f"{upload_url}?name={RELEASE_FILE_PATTERN}",
                headers=upload_headers,
                data=file
            )
            upload_response.raise_for_status()
        
        logger.info(f"GitHub —Ä–µ–ª—ñ–∑ v{version} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ñ–∞–π–ª–æ–º {RELEASE_FILE_PATTERN}")
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è GitHub —Ä–µ–ª—ñ–∑—É: {e}")
        return False

@app.on_message(filters.chat(TELEGRAM_GROUP_ID) & filters.document)
async def handle_document(client, message: Message):
    """–û–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ñ–∞–π–ª 4IFIR.zip
        if message.document.file_name != RELEASE_FILE_PATTERN:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ç–æ–ø—ñ–∫—É
        if hasattr(message, 'reply_to_message_id') and message.reply_to_message_id == TELEGRAM_TOPIC_ID:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–æ–≥ —É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —á–∞—Ç –¥–ª—è –ª–æ–≥—ñ–≤
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª {RELEASE_FILE_PATTERN} –≤ —Ç–æ–ø—ñ–∫—É {TELEGRAM_TOPIC_ID}. –ü–æ—á–∏–Ω–∞—é –æ–±—Ä–æ–±–∫—É..."
            )
        else:
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —Ä–µ–ª—ñ–∑-–Ω–æ—É—Ç
        release_notes = message.caption if message.caption else "–ù–æ–≤–∏–π —Ä–µ–ª—ñ–∑"
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é –∑ —á–∞—Å–æ–≤–æ—ó –º—ñ—Ç–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY.MM.DD-HH.MM
        version = datetime.now().strftime("%Y.%m.%d-%H.%M")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_file:
            temp_path = temp_file.name
            
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª
        await message.download(temp_path)
        await client.send_message(
            TELEGRAM_LOG_CHAT_ID,
            f"üì¶ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª"
        )
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub –∑ —Ñ–∞–π–ª–æ–º
        success = create_github_release(version, release_notes, temp_path)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        
        if success:
            release_url = f"https://github.com/{GITHUB_OWNER}/{GITHUB_REPO}/releases/tag/v{version}"
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –ª–æ–≥—ñ–≤
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                f"‚úÖ –†–µ–ª—ñ–∑ v{version} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ GitHub!\n" + 
                f"üìé {release_url}"
            )
        else:
            await client.send_message(
                TELEGRAM_LOG_CHAT_ID,
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–ª—ñ–∑ –Ω–∞ GitHub. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏."
            )
            
    except Exception as e:
        error_message = f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}"
        logger.error(error_message)
        await client.send_message(TELEGRAM_LOG_CHAT_ID, error_message)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await app.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    
    # –ó–∞–ª–∏—à–∞—î–º–æ—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏
    await idle()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())